/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Idle.gltf --transform 
Files: Idle.gltf [90.53KB] > /Users/ale/Clients/react-futbol/src/gltf_exports/Idle-transformed.glb [340.66KB] (-276%)
*/

import {useEffect, useRef, useMemo } from 'react'
import { useGraph, useLoader, useThree, useFrame } from '@react-three/fiber'
import { useGLTF, useAnimations, Text3D } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useSpring, a } from '@react-spring/three'
import { TextureLoader } from 'three'



export function SoccerPlayerIdle({position, number, ...props}) {
  const group = useRef()
  const textRef = useRef()
  const { scene, animations, materials } = useGLTF('/Idle-transformed.glb')
  // âœ… Clone GLTF only when loaded
  const clone = useMemo(() => (scene ? SkeletonUtils.clone(scene) : null), [scene])

  const numberColorMap = useLoader(TextureLoader , '/161B1F_C7E0EC_90A5B3_7B8C9B.png')
  const skinColorMap = useLoader(TextureLoader , '/1A2461_3D70DB_2C3C8F_2C6CAC.png')

  const { camera } = useThree()

  const { nodes } = useGraph(clone)
  const { actions , names} = useAnimations(animations, group)

  // ðŸŒ€ Animate position with spring
  const { pos } = useSpring({
    pos: position, // New target position
    config: { mass: 1, tension: 120, friction: 20 }, // Adjust for smoother/slower motion
  })

  useEffect( () => {
    actions[names[0]].reset().fadeIn(0.3).play()
  }, [actions, names])



  console.log( nodes.Man.geometry.attributes.uv, numberColorMap )
  return (
    <a.group ref={group} position={pos} {...props} dispose={null} rotation={[0, Math.PI, 0]} >
      <group name="Scene">

        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
        </group>

        <skinnedMesh 
          name="Man"
          geometry={nodes.Man.geometry} 
          // material={materials.Man_mtl} 
          skeleton={nodes.Man.skeleton} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={0.1} >
            <meshMatcapMaterial matcap={skinColorMap} skinning />
        </skinnedMesh>

        {/* Player Number */}
        {number && (
          <Text3D
          ref={textRef}
            position={[.4, 2.6, -.02]} // Position text slightly above the sphere
            rotation={[0,- Math.PI, 0]}
            fontSize={0.05}
             font={"/fonts/gt.json"}
              lineHeight={0.9}
              letterSpacing={0.3}
            // color="white"
            // anchorX="center"
            // anchorY="middle"
          >
            {number}
                 <meshMatcapMaterial matcap={numberColorMap} />
          </Text3D>
        )}

      </group>
    </a.group>
  )
}

useGLTF.preload('/Idle-transformed.glb')
